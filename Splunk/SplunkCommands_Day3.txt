##Splunk Transaction Command

Transaction collapses a set of events that belong to a transaction into a single event. 
Transaction command produces two fields to the raw events, duration and eventcount. The duration value is the difference between the timestamps for the first and last events in the transaction. The eventcount value is the number of events in the transaction.

•	A transaction is any group of related events that span time
•	Events can come from multiple applications or hosts
•	Events related to a single purchase from an online store can span across an
application server, database, and e-commerce engine

Syntax
Transaction <fieldlist><constraints>
• <field-list>
–  One field or a list of field names
–  The events are grouped into transactions based on the values of this field list

• Common constraints:
– <maxspan> | <maxpause> | <maxevents> | <startswith> | <endswith> | <keepevicted> 

Example 1 :
• Use the transaction command to create a single event from a group of events that share the same value in a given field
• Transactions can cross multiple tiers (i.e., web server, application server) using a common field(s), in this example, JSESSIONID

Example 2
Use of maxspan/maxpause
Display customer actions on the website during the last 4 hours.
Can also define a max overall time span and max gap between events
maxspan=10m
        	 ? Maximum total time between the earliest and latest events
        	 ? If not specified, default is -1 (or no limit)
 maxpause=1m
        	 ? Maximum total time between events 
        	 ? If not specified, default is -1 (or no limit)

Example 3

Use of startswith/endswith
Determine the length of time spent by customers in the online store to purchase.
• To form transactions based on terms, field values, or evaluations, use startswith and endswith options
• In this example, the first event in the transaction includes addtocart and the last event includes purchase

How to report uncompleted transaction

The transaction command creates an internal field named closed_txn to indicate if a given transaction is complete or not.
keepevicted=<bool>
Description: 
Whether to output evicted transactions. Evicted transactions are events that do NOT match the transaction parameters; for example, the time range is wrong, or the "startswith" or "endswith" requirements are missing. Evicted transactions can be distinguished from non-evicted transactions by checking the value of the 'closed_txn' field, which is set to '0' for evicted transactions and '1' for closed ones. A transaction is evicted from memory when the memory limitations are reached.
Transactions that fulfill both the "startswith" and "endswith" condition are marked as successful by having the fieldclosed_txn set to 1, where transactions that fail to fulfill one or both of these conditions are marked as unsuccessful by having the fieldclosed_txn set to 0.
In our case, to report on incomplete transactions we need to :
•	Keep all transactions, both closed (those that match all the transaction restrictions) and open (those that fail to match all the transaction restrictions), by specifying "keepevicted=true".
•	Use the "closed_txn" Boolean field generated by the transaction command to differentiate the invalid transactions.



Examples:
Sourcetype = apple* | transaction JSESSIONID
sourcetype = apple* | transaction JSESSIONID | table JSESSIONID action category_id
sourcetype = apple* | transaction JSESSIONID maxspan=30s maxpause=5s
sourcetype = apple* | sort _time | transaction JSESSIONID startswith=signon endswith=signoff keepevicted=t| search closed_txn=0


### Calculative commands ###

## Addtotals ##
The addtotals command computes the arithmetic sum of all numeric fields for each search result

index=onlinestore | chart count  by clientip category_id usenull=f | addtotals fieldname="Products Total"

## Addcoltotals ##
The addcoltotals command appends a new result to the end of the search result set.
The result contains the sum of each numeric field or you can specify which fields to summarize.


## Timechart 


index=_internal | timechart span=15m count

Timechart cannot produce splitby field for more than one field

## Reverse

 Reverse is a command to display the events from earliest to latest in ascending order

Normally Splunk will search from latest to earliest and display in descending order

index=_internal | reverse


## Rangemap

index=_internal | stats count by source | rangemap field=count good=0-100 bad=100-1000 worst=1000-2000 default=poor


##Stats command

Calculate aggregate statistics over the dataset, similar to SQL aggregation. If called without a by clause, one row is produced, which represents the aggregation over the entire incoming result set. If called with a by-clause, one row is produced for each distinct value of the by-clause.

Once the table is created by the stats command, Splunk now knows nothing about the original bytes field earlier in the pipeline


##Eventstats

Eventstats, computes the requested statistics like stats, but aggregates them to the original raw data

Now just like stats there are two values original and the calculated value, but they are aggregated to the raw events and can be used for later calculation. Just a note, your raw data is untouched. The aggregation is just a presentation feature that you get with eventstats.


##Streamstats

If you are interested in what is happening in a streaming manner then use streamstats command
Use the window option specifies the number of events to use when computing the statistic



Examples
index=main sourcetype=ses | stats sum(total) as Total by user | table user total Total ---- Not able to capture original data once statistics created


index=main sourcetype=ses | eventstats sum(total) as Total by user | table user total Total  ------ Final Total


index=main sourcetype=ses | streamstats sum(total) as Total by user | table user total Total  ----- Streaming / Running Total


index=main sourcetype=uj | streamstats window=3 global=f  sum(total) as Total by user | table user total Total


#########################################################################

Foreach command

Runs a templated streaming subsearch for each field in a wildcarded field list.


Sample Queries


index=_internal | timechart count by sourcetype  | addtotals fieldname=_Total  | foreach * [eval <<FIELD>> = '<<FIELD>>' * 100 / _Total] | fields - _Total

index=* source="access_combined.log" | chart count by clientip category_id | addtotals | foreach PLANTS [eval total= <<FIELD>> + Total ]


Parameters


<<FIELD>> token in the foreach subsearch is just a string replacement of the field names of wildcards

Eval expression does not recognize field names with non-alphanumeric characters unless the field names are surrounded

########################################################################

## Fieldsummary

index=_internal sourcetype=splunkd earliest=-15m latest=now | fieldsummary

index=_internal sourcetype=splunkd  earliest=-15m latest=now | fieldsummary maxvals=10 *size* *count*

## Folderize

index=_internal | stats count(uri) by uri | folderize size=count(uri) attr=uri sep="/"

########################################################################

## Transpose
index=onlinestore | stats count by category_id | transpose

index=onlinestore  status=200 | stats count AS views count(eval(action="update")) AS addtocart count(eval(action="purchase")) AS purchases | transpose


##convert commands

1. To convert duration in time format to seconds value

Example:

Job runs for 1 hour 30 minutes and we want to convert it into seconds 

index=_internal | head 1 | eval dur="01:30:00" | convert dur2sec(dur) as mytime | table dur mytime

index=_internal | head 1 | eval StartTime="2016-08-15 10:00:00" | eval Runtime="01:00:00" | eval startepoch=round(strptime(StartTime,"%Y-%m-%d %H:%M:%S")) | convert dur2sec(Runtime) as mytime | eval endepoch=startepoch+mytime | eval end=strftime(endepoch,"%Y-%m-%d %H:%M:%S") | table StartTime startepoch mytime endepoch  end

2. To remove the unit values from the numbers

index=_internal | head 1 | eval distance="100 km" | convert rmunit(distance) as distance_numeric | table distance distance_numeric

Example:

If you want to calculate anything with distance field it should be numeric


3. To remove commas from the numeric value

index=_internal | head 1 | eval distance="100,000,000" | convert rmcomma(distance) as distance_numeric | table distance distance_numeric

4. ctime function

Convert an epoch time to an ascii human readable time. Use the timeformat option to specify exact format to convert to.

sourcetype=syslog | convert timeformat="%H:%M:%S" ctime(_time) AS c_time | table _time, c_time
