rohit1309singhbucket

https://github.com/aws-samples/aws-lambda-lifecycle-hooks-function

*************************************

Auto Scaling group name (line 12) 	“ASGNAME=’AutoScaling_1'”,
Lifecycle hook name (line 13) 	“LIFECYCLEHOOKNAME=’AutoScalingHook1'”,
Directory to back up (line 14) 	“BACKUPDIRECTORY=’/var/log'”,
S3 bucket (line 15) 	“S3BUCKET='rohit1309singhbucket'”,
SNS target (line 16) 	“SNSTARGET=’arn:aws:sns:’${REGION}’:<your_account_id>:<your_sns_ backupoutcome_topic>”

*************************************

NewLambda1 ---> Stop
AutoScaleLambda2 ---> Start

import boto3

client=boto3.client('ec2')

def lambda_handler(event, context):
    
    response=client.describe_instance()
    
    for reservation in response["Reservations"]:
        
        for instance in reservation["Instances"]:
            
                print(instance["InstanceId"] + "stopping")
                id=[instance["InstanceId"]]
                client.stop_instances(InstanceIds=id)
            
    
    return ("It's done!")

	
	
	
	
	
	
	***********************************************************************************

	
	
{
  "schemaVersion": "1.2",
  "description": "Backup logs to S3",
  "parameters": {},
  "runtimeConfig": {
    "aws:runShellScript": {
      "properties": [
        {
          "id": "0.aws:runShellScript",
          "runCommand": [
            "",
            "ASGNAME='ASGBackup'",
            "LIFECYCLEHOOKNAME='ASGBackup'",
            "BACKUPDIRECTORY='/var/log'",
            "S3BUCKET='<your_bucket_name>'",
            "INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)",
            "REGION=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)",
            "REGION=${REGION::-1}",
            "SNSTARGET='arn:aws:sns:'${REGION}':<your_account_id>:<your_sns_ backupoutcome_topic>'",                       
            "HOOKRESULT='CONTINUE'",
            "MESSAGE=''",
            "",
            "tar -cf /tmp/${INSTANCEID}.tar $BACKUPDIRECTORY &> /tmp/backup",
            "if [ $? -ne 0 ]",
            "then",
            "   MESSAGE=$(cat /tmp/backup)",
            "else",
            "   aws s3 cp /tmp/${INSTANCEID}.tar s3://${S3BUCKET}/${INSTANCEID}/ &> /tmp/backup",
            "       MESSAGE=$(cat /tmp/backup)",
            "fi",
            "",
            "aws sns publish --subject 'ASG Backup' --message \"$MESSAGE\"  --target-arn ${SNSTARGET} --region ${REGION}",
            "aws autoscaling complete-lifecycle-action --lifecycle-hook-name ${LIFECYCLEHOOKNAME} --auto-scaling-group-name ${ASGNAME} --lifecycle-action-result ${HOOKRESULT} --instance-id ${INSTANCEID}  --region ${REGION}"
          ]
        }
      ]
    }
  }
}